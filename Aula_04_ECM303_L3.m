%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Renan Scheidt Reschke%% 19.02009-0%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 0 - Boas práticas%%%%   Referências: https://youtu.be/Q832jvYdnzYclc;clear all;close all;%%% carregando o pacote de controle e sinaispkg load control;pkg load signal;%%% dados = load("-ascii", "exp7.txt");%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 - Leitura e investigação dos dados%%%% coluna 3 refere-se a entradadados = load("-ascii", "exp7.txt");%%% Renomeando as colunasentrada    = dados(:,3);           % entrada aplicada ao motorvelocidade = dados(:,1);           % entrada aplicada ao motorposicao    = dados(:,2);           % entrada aplicada ao motor%%% Criando o vetor tempoNp         = length(entrada);     % número de pontos coletadosTs         = 1/1000;              % tempo de amostragemtempo      = [0:Ts:(Np-1)*Ts];    % vetor tempo%%% tempo  =  linspace(0,(Np-1)*Ts,Np);%%% Visualização dos dadosfigure(1)subplot(3,1,1);plot(tempo,entrada(1:end),'linewidth',3);grid;title('Entrada');xlabel('Tempo em segundos');ylabel('Tensao');subplot(3,1,2);plot(tempo,velocidade(1:end),'linewidth',3)grid;title('Velocidade');xlabel('Tempo em segundos');ylabel('Tensao');subplot(3,1,3);plot(tempo,posicao(1:end),'linewidth',3)grid;title('Posicao');xlabel('Tempo em segundos');ylabel('Tensao');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 - Qual a função de transferência em Laplace que relaciona a entrada %%     e a velocidade? Gm(s) = Nm(s)/Dm(s)%%%%     Plotar de forma sobreposta os dados (real) e o modelo matemático%%%%% Pólo e ganho = Gm(s) = ganho/ (s + polo) --> primeira ordem --> exp(-polo*tempo)ganho =  22.478;          % ganho do sistemapolo  =  28.094;          % polo do sistema%%% quanto maior o valor do polo mais rápido o sistema éNm    = ganho;      % numerador da função de laplaceDm    = [1 polo];   % denominador de laplace%%% Função de transferência - modelo matemáticoGm    = tf(Nm,Dm);##Transfer function 'Gm' from input 'u1' to output ...####        1## y1:  -----##      s + 1####Continuous-time model.%%% Visualizar o resultado do modelo comparado aos dadosSYS = Gm;                       % sistema a ser simuladoU   = entrada;                  % entrada do sistemaT   = tempo;                    % vetor tempo%%%% ym - saída%%%%%% CI - condição inicial[ym, T, CI] = lsim (SYS, U, T);%%% Calculando o erro quadráticoErro = sum((ym - velocidade).^2)%%% Visualizaçãofigure(2)plot(tempo,velocidade(1:end),'linewidth',3)grid;hold;plot(tempo,ym,'linewidth',3)title('Dados e resposta do modelo');xlabel('Tempo em segundos');ylabel('Tensao');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 3 - Modelagem das malhas de posição e velocidade%%%% %%%%%%% Malha de velocidade%%% Vomega(s)/V(s) = Kmotor*Komega/(s + pmotor) --> com o sensor%%%% Omega(s)/V(s)  = Kmotor/(s + pmotor)        --> sem o sensorfigure(3)plot(tempo(1:4685/4),posicao(1:4685/4),'linewidth',3);hold;plot(tempo(1:4685/4),velocidade(1:4685/4),'linewidth',3);grid;%%% Determinando uma rotaçãorotacao = 2*pi/(0.5-0.35);    % segundos - rotacao =  41.888 rd/s%%% Detemrinar o ganho do sensor - KomegaKomega = 3.05/rotacao;%%% Determinando o ganho do motorKmotor = 22.48/Komega;##Transfer function 'Gm' from input 'u1' to output ...####        22.48## y1:  ---------##      s + 28.09####Continuous-time model.%%% Validação do modelo encontrado% Gveltensao => Kmotor*Komega/(s + pm);pm           = polo;NumVelTensao = [Kmotor*Komega];DenVelTensao = [1 pm];GVelTensao   = tf(NumVelTensao,DenVelTensao);%%% Aplico a entrada real no modelo%%% Visualizar o resultado do modelo comparado aos dadosSYS = GVelTensao;               % sistema a ser simuladoU   = entrada;                  % entrada do sistemaT   = tempo;                    % vetor tempo%%%% ym - saída%%%%%% CI - condição inicial[yVelTensao, T, CI] = lsim (SYS, U, T);%%% Visualizaçãofigure(4)plot(tempo,velocidade(1:end),'linewidth',3)grid;hold;plot(tempo,yVelTensao,'linewidth',3)title('Dados e resposta do modelo');xlabel('Tempo em segundos');ylabel('Tensao');%%%%%%% Malha de posição%%%% Omega(s)/V(s)  = Kmotor/(s + pmotor)        --> sem o sensor%%   Gvel => Kmotor/(s + pm);                    --> rd/spm           = polo;NumVel       = [Kmotor];DenVel       = [1 pm];GVel         = tf(NumVel,DenVel);%%% IntegradorNumInt = 1;DenInt = [1 0];GInt   = tf(NumInt,DenInt);GPos   = GVel*GInt;%%% Ganho do sensor de posiçãoKtheta = 20/(2*pi);%%% 1 volta completa ==> 2 * pi ==> 20 volts%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Validação do modelo encontrado para posição% GPostensao => Kmotor*Ktheta/(s*(s + pm)) = Kmotor*Ktheta/(s^2 + pm s + 0));pm           = polo;NumPosTensao = [Kmotor*Ktheta];DenPosTensao = [1 pm 0];GPosTensao   = tf(NumPosTensao,DenPosTensao);%%% Aplico a entrada real no modelo%%% Visualizar o resultado do modelo comparado aos dadosSYS = GPosTensao;               % sistema a ser simuladoU   = entrada;                  % entrada do sistemaT   = tempo;                    % vetor tempo%%%% ym - saída%%%%%% CI - condição inicial[yPosTensao, T, CI] = lsim (SYS, U, T);%%% Modela o sensor de posiçãoyPosTensao =  pi*mod(yPosTensao,2*pi)-10;%%% Visualizaçãofigure(5)plot(tempo,posicao(1:end),'linewidth',3)grid;hold;plot(tempo,yPosTensao,'linewidth',3)title('Dados e resposta do modelo');xlabel('Tempo em segundos');ylabel('Tensao');